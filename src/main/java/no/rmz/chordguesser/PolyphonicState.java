package no.rmz.chordguesser;

/**
 * The state of the sound being generated by the instrument. Each entry contains
 * a collection of single note states, each of which describing the latest
 * active event for that note. A "key up" event will mean that no sound is being
 * generated on that note any longer, so the corresponding state is then
 * removed.
 */
public final class PolyphonicState implements NoteListener {

    /**
     * Maximum number of midi notes we can listen to.
     */
    private final static int MAX_NO_OF_MIDI_NOTES = 128;

    /**
     * The state representation. The bit 'i' is on if and only if the note 'i'
     * is keyed.
     */
    private final BitVector stateVector;

    public PolyphonicState() {
        stateVector = new BitVector(MAX_NO_OF_MIDI_NOTES);
    }

    private void checkArg(int i) {
        if (i < 0 || i >= MAX_NO_OF_MIDI_NOTES) {
            throw new IllegalArgumentException("Illegal MIDI note: " + i);
        }
    }

    @Override
    public void noteOn(int i) {
        checkArg(i);
        stateVector.set(i);
    }

    @Override
    public void noteOff(int i) {
        checkArg(i);
        stateVector.unset(i);
    }
}
